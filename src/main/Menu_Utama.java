/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package main;

import view.Supplier;
import view.PermintaanBarang;
import view.PenerimaanBarang;
import view.User;
import view.ItemPanel;
import view.Dashboard;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import javax.swing.ImageIcon;
import javax.swing.JFrame;

/**
 *
 * @author LENOVO
 */
public class Menu_Utama extends javax.swing.JFrame {

    /**
     * Creates new form MenuUtama
     */
    public Menu_Utama() {
        initComponents();
        this.setExtendedState(JFrame.MAXIMIZED_BOTH);
        
        execute();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pn_runbar = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        pn_sidebar = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        pn_menu = new javax.swing.JPanel();
        pn_content = new javax.swing.JPanel();
        pn_utama = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        pn_runbar.setBackground(new java.awt.Color(204, 255, 255));
        pn_runbar.setMinimumSize(new java.awt.Dimension(60, 100));
        pn_runbar.setPreferredSize(new java.awt.Dimension(750, 60));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/TokBang.png"))); // NOI18N

        javax.swing.GroupLayout pn_runbarLayout = new javax.swing.GroupLayout(pn_runbar);
        pn_runbar.setLayout(pn_runbarLayout);
        pn_runbarLayout.setHorizontalGroup(
            pn_runbarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pn_runbarLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(635, Short.MAX_VALUE))
        );
        pn_runbarLayout.setVerticalGroup(
            pn_runbarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pn_runbarLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(106, 106, 106))
        );

        getContentPane().add(pn_runbar, java.awt.BorderLayout.PAGE_START);

        pn_sidebar.setBackground(new java.awt.Color(255, 255, 255));
        pn_sidebar.setPreferredSize(new java.awt.Dimension(230, 440));

        jScrollPane1.setBackground(new java.awt.Color(255, 255, 255));
        jScrollPane1.setBorder(null);

        pn_menu.setBackground(new java.awt.Color(255, 255, 255));
        pn_menu.setLayout(new javax.swing.BoxLayout(pn_menu, javax.swing.BoxLayout.Y_AXIS));
        jScrollPane1.setViewportView(pn_menu);

        javax.swing.GroupLayout pn_sidebarLayout = new javax.swing.GroupLayout(pn_sidebar);
        pn_sidebar.setLayout(pn_sidebarLayout);
        pn_sidebarLayout.setHorizontalGroup(
            pn_sidebarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 230, Short.MAX_VALUE)
        );
        pn_sidebarLayout.setVerticalGroup(
            pn_sidebarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 440, Short.MAX_VALUE)
        );

        getContentPane().add(pn_sidebar, java.awt.BorderLayout.LINE_START);

        pn_content.setBackground(new java.awt.Color(255, 255, 255));

        pn_utama.setBackground(new java.awt.Color(255, 255, 255));
        pn_utama.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout pn_contentLayout = new javax.swing.GroupLayout(pn_content);
        pn_content.setLayout(pn_contentLayout);
        pn_contentLayout.setHorizontalGroup(
            pn_contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pn_utama, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        pn_contentLayout.setVerticalGroup(
            pn_contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pn_utama, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        getContentPane().add(pn_content, java.awt.BorderLayout.CENTER);

        setSize(new java.awt.Dimension(766, 508));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        pn_utama.add(new Dashboard());
        pn_utama.repaint();
        pn_utama.revalidate();
    }//GEN-LAST:event_formWindowOpened

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Menu_Utama.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Menu_Utama.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Menu_Utama.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Menu_Utama.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Menu_Utama().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel pn_content;
    private javax.swing.JPanel pn_menu;
    private javax.swing.JPanel pn_runbar;
    private javax.swing.JPanel pn_sidebar;
    private javax.swing.JPanel pn_utama;
    // End of variables declaration//GEN-END:variables

    private void execute() {
        ImageIcon iconHome = new ImageIcon(getClass().getResource("/img/icons8_home_20px.png"));
        ImageIcon iconMaster = new ImageIcon(getClass().getResource("/img/icons8_opened_folder_20px.png"));
        ImageIcon iconTransaction = new ImageIcon(getClass().getResource("/img/icons8_transaction_20px.png"));
        ImageIcon iconReport = new ImageIcon(getClass().getResource("/img/icons8_report_file_20px.png"));
        ImageIcon iconOut = new ImageIcon(getClass().getResource("/img/icons8_cancel_20px.png"));
        ImageIcon iconUser = new ImageIcon(getClass().getResource("/img/icons8_myspace_3_20px_1.png"));
        ImageIcon iconItem = new ImageIcon(getClass().getResource("/img/icons8_new_product_20px.png"));
        ImageIcon iconSupp = new ImageIcon(getClass().getResource("/img/icons8_supplier_20px.png"));
        ImageIcon icontraRI = new ImageIcon(getClass().getResource("/img/icons8_add_to_collection_20px.png"));
        ImageIcon icontraREI = new ImageIcon(getClass().getResource("/img/icons8_delivered_box_20px.png"));
        ImageIcon iconreportSB = new ImageIcon(getClass().getResource("/img/icons8_edit_product_20px.png"));
        ImageIcon iconreportBMK = new ImageIcon(getClass().getResource("/img/icons8_inventory_flow_20px.png"));
        
        Menu_Item masUser = new Menu_Item(null, true, iconUser, "User", new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                pn_utama.removeAll();
                pn_utama.add(new User());
                pn_utama.repaint();
                pn_utama.revalidate();
            }
        });
        Menu_Item masItem = new Menu_Item(null, true, iconItem, "Item", new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                pn_utama.removeAll();
                pn_utama.add(new ItemPanel());
                pn_utama.repaint();
                pn_utama.revalidate();
            }
        });
        Menu_Item masSupplier = new Menu_Item(null, true, iconSupp, "Supplier", new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                pn_utama.removeAll();
                pn_utama.add(new Supplier());
                pn_utama.repaint();
                pn_utama.revalidate();
            }
        });
        
        Menu_Item traRI = new Menu_Item(null, true, icontraRI, "Request Item", new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                pn_utama.removeAll();
                pn_utama.add(new PermintaanBarang());
                pn_utama.repaint();
                pn_utama.revalidate();
            }
        });
        Menu_Item traREI = new Menu_Item(null, true, icontraREI, "Receive Item", new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                pn_utama.removeAll();
                pn_utama.add(new PenerimaanBarang());
                pn_utama.repaint();
                pn_utama.revalidate();
            }
        });
        
        Menu_Item reportSB = new Menu_Item(null, true, iconreportSB, "Stock Goods", null);
        Menu_Item reportBMK = new Menu_Item(null, true, iconreportBMK, "Inventory Flow", null);
        
        Menu_Item menuHome = new Menu_Item(iconHome, false, null, "Home", new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                pn_utama.removeAll();
                pn_utama.add(new Dashboard());
                pn_utama.repaint();
                pn_utama.revalidate();
            }
        });
        Menu_Item menuMaster = new Menu_Item(iconMaster, false, null, "Master Data", null, masUser, masItem, masSupplier);
        Menu_Item menuTransaction = new Menu_Item(iconTransaction, false, null, "Transactions", null, traRI, traREI);
        Menu_Item menuReport = new Menu_Item(iconReport, false, null, "Report", null, reportSB, reportBMK);
        Menu_Item menuOut = new Menu_Item(iconOut, false, null, "Logout", new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                dispose();
            }
        });
        
        addMenu(menuHome, menuMaster,menuTransaction,menuReport,menuOut);
    }
    
    private void addMenu(Menu_Item... menu) {
        for (int i = 0; i < menu.length; i++) {
            pn_menu.add(menu[i]);
            ArrayList<Menu_Item> subMenu = menu[i].getSubMenu();
            for (Menu_Item m : subMenu) {
                addMenu(m);
            }
        }
        pn_menu.revalidate();
    }
}
